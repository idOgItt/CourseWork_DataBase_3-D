services:
  backend:
    build:
      context: ./backend
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_LOCATIONS: classpath:/db/migration
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true

      DB_HOST: db
      DB_PORT: "${DB_PORT}"
      WAIT_TIMEOUT: 0
    env_file:
      - .env
    entrypoint: ["docker-entrypoint.sh"]
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: ./frontend
    ports:
      - "${FRONTEND_PORT}:${NGINX_PORT}"
    depends_on:
      - backend
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: "${SERVER_PORT}"
      WAIT_TIMEOUT: 0
    env_file:
      - .env
    entrypoint: ["docker-entrypoint.sh"]
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    build:
      context: ./database
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backup:
    build:
      context: ./backup
    volumes:
      - ./database/backups:/backups
      - ./env:/env
      - ./logs:/var/log/cron
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_PORT: "${DB_PORT}"
      WAIT_TIMEOUT: 0
    entrypoint: ["docker-entrypoint.sh"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
